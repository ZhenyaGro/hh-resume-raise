import dotenv from "dotenv";
import axios from "axios";
import { TOKEN_URL } from "./constants/tokenUrl";
import { loadTokens, saveTokens } from "../helpers/tokenStorage";
import { Tokens } from "../type";
import { addExpiry } from "../helpers/addExpiry";

dotenv.config();

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access_token –ø–æ refresh_token.
 * @param {string} refreshToken - –∑–Ω–∞—á–µ–Ω–∏–µ refresh_token, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
 * @returns {Promise<Tokens>} —Ç–æ–∫–µ–Ω—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è.
 */
const refreshAccessToken = async (refreshToken: string): Promise<Tokens> => {
  const params = new URLSearchParams({
    grant_type: "refresh_token",
    refresh_token: refreshToken,
    client_id: process.env.HH_CLIENT_ID,
    client_secret: process.env.HH_CLIENT_SECRET,
  });

  const response = await axios.post(TOKEN_URL, params);
  return addExpiry(response.data);
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ access_token.
 * –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ refresh_token.
 * @returns {Promise<string>} –≤–∞–ª–∏–¥–Ω—ã–π access_token.
 */
export const getValidAccessToken = async (): Promise<string> => {
  let tokens = await loadTokens();

  if (!tokens) {
    throw new Error(
      "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å code –≤—Ä—É—á–Ω—É—é."
    );
  }

  const now = Date.now();

  if (tokens.expires_at > now) {
    return tokens.access_token;
  }

  console.log("üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...");
  tokens = await refreshAccessToken(tokens.refresh_token);
  await saveTokens(tokens);

  return tokens.access_token;
};
